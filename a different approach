import random
import string

'''
nounlist_filename = 'noun.txt'
verblist_filename = 'verb.txt'
adjlist_filename = 'adj.txt'
Mprop_nounlist_filename = 'propnoun.txt'
Fprop_nounlist_filename = 'fpropnoun.txt'
artlist_filename = 'article.txt'
conjlist_filename = 'conjunction.txt'
questlist_filename = 'question.txt'
being_verblist_filename= 'beingverb.txt'
'''

def loadFile(x):
    '''
    returns a list of valid nouns as string
    '''
    # inFile: file
    inFile = open(x, 'r', 0)
    # line: string
    line = inFile.readline()
    # nounlist: list of stringsïœ‰
    xlist = string.split(line)
    return xlist

Mstory_char = ['He','They',]
Fstory_char = ['She','They',]
def chooseWord(wordlist):
    if wordlist == Mprop_nounlist:
        while len(Mstory_char) <= 2:
            Mstory_char.append(random.choice(wordlist))
        return random.choice(Mstory_char)
    elif wordlist == Fprop_nounlist:
        while len(Fstory_char) <=2:
            Fstory_char.append(random.choice(wordlist))
        return random.choice(Fstory_char)
    else:
        return random.choice(wordlist)

nounlist = loadFile('noun.txt')
Mprop_nounlist = loadFile('propnoun.txt')
Fprop_nounlist = loadFile('fpropnoun.txt')
verblist = loadFile('verb.txt')
adjlist = loadFile('adj.txt')
nounlist2 = loadFile('noun.txt')
artlist = loadFile('article.txt')
conjlist = loadFile('conjunction.txt')
pronounlist = loadFile('pronoun.txt')
adverblist = loadFile('adverbs.txt')
questlist = loadFile('question.txt')
being_verblist = loadFile('beingverb.txt')

def get_sentence_structure():

    i = random.randrange(7)
    if i <= 2:
        structure = 'simp'
        return structure
    elif i > 2 and i <=5:
        structure = 'comp'
        return structure
    elif i == 6:
        structure = 'state'
        return structure
    else:
        structure = 'question'
        return structure

'''
'''
vowel= ['a','e','i','o','u']
vowel_sounds = ['honest', 'hour', 'heir', 'honor']
def get_verb():
    verb = str(chooseWord(verblist))
    return verb
def get_being_verb():
    being_verb= str(chooseWord(being_verblist))
    return being_verb
def get_pronoun():
    pronoun= str(chooseWord(pronounlist))
    return pronoun

def get_subject():
    i = random.randrange(2)
    if i == 1:
        subject = str(chooseWord(Mprop_nounlist))
        return subject
    else:
        subject = str(chooseWord(Fprop_nounlist))
        return subject
def get_obj():
    obj = str(chooseWord(nounlist2))
    return obj
def get_art():
    art = str(chooseWord(artlist))
    obj = get_obj().lower()
    if art == 'a' and obj[0] in vowel:
        art = 'an'
        return art+' '+obj
    elif art == 'a' and obj[len(obj)-1] =='s':
        art='the'
        return art+' '+obj
    elif art == 'a' and obj in vowel_sounds:
        art = 'an'
        return art+' '+obj
    else:
        return art+' '+obj
def get_conj():
    conj = str(chooseWord(conjlist))
    return conj

def get_question_grammar():
    '''
    returns grammatical structure based on which question word is chosen
    '''
    sentence1=[]
    if str(chooseWord(questlist)) == 'Who':
        sentence1.append(get_subject())
        sentence1.append("asked, 'Who")
        sentence1.append(get_verb())
        sentence1.append(get_art()+"?'")
    elif str(chooseWord(questlist)) == 'Whose':
        sentence1.append(get_subject())
        sentence1.append("asked, 'Whose")
        sentence1.append(get_verb())
        sentence1.append(get_art()+"?'")
    elif str(chooseWord(questlist)) == 'What':
        sentence1.append(get_subject())
        sentence1.append("asked, 'What")
        sentence1.append(get_being_verb())
        sentence1.append(get_art()+"?'")
    elif str(chooseWord(questlist)) == 'When':
        sentence1.append(get_subject())
        sentence1.append("asked, 'When")
        sentence1.append(get_being_verb())
        sentence1.append(get_pronoun())
        sentence1.append(get_verb()+"?'")
    elif str(chooseWord(questlist)) == 'Where':
        sentence1.append(get_subject())
        sentence1.append("asked, 'Where")
        sentence1.append(get_being_verb())
        sentence1.append(get_art()+"?'")
    elif str(chooseWord(questlist)) == 'Why':
        sentence1.append(get_subject())
        sentence1.append("asked, 'Why")
        sentence1.append(get_being_verb())
        sentence1.append(get_art())
        sentence1.append(get_verb()+"?'")
    elif str(chooseWord(questlist)) == 'How':
        sentence1.append(get_subject())
        sentence1.append("asked, 'How")
        sentence1.append(get_being_verb())
        sentence1.append(get_art()+"?'")
    else:
        sentence1.append(get_subject())
        sentence1.append("asked, 'Which")
        sentence1.append('of')
        sentence1.append(get_art())
        sentence1.append(get_being_verb())
        sentence1.append(get_verb()+"?'")
    return ' '.join(sentence1)
    

def get_sentence_grammar():
    '''
    formats a random sentence based on generic sentence structure
    '''
    sentence = []
    if get_sentence_structure()=='simp':
        obj = get_obj()
        sentence.append(get_subject())
        sentence.append(get_verb())
        sentence.append(get_art()+'.')
        return ' '.join(sentence)
    elif get_sentence_structure()=='comp':
        sentence.append(get_subject())
        sentence.append(get_verb())
        sentence.append(get_art()+",")
        sentence.append(get_conj())
        sentence.append(get_subject().lower())
        sentence.append(get_verb())
        sentence.append(get_art()+'.')
        return ' '.join(sentence)
    elif get_sentence_structure()=='state':
        sentence.append(get_subject())
        sentence.append("said, 'I")
        sentence.append(get_verb())
        sentence.append(get_art()+".'")
        return ' '.join(sentence)
    else:
        return get_question_grammar()

def paragraph():
    '''
    returns 5 sentences in paragraph form
    '''
    for n in range(5):
        print get_sentence_grammar()
    print " "
def paper():
    '''
    returns a 5 paragraph random paper
    '''
    chooseWord(Mprop_nounlist)
    chooseWord(Fprop_nounlist)
    print "This is the story of {!s} and {!s}".format(Mstory_char[2], Fstory_char[2])
    for n in range(5):
        paragraph()
        
print paper()
